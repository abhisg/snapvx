# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ADMM', [dirname(__file__)])
        except ImportError:
            import _ADMM
            return _ADMM
        if fp is not None:
            try:
                _mod = imp.load_module('_ADMM', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ADMM = swig_import_helper()
    del swig_import_helper
else:
    import _ADMM
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ADMM.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ADMM.SwigPyIterator_value(self)
    def incr(self, n=1): return _ADMM.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _ADMM.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ADMM.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ADMM.SwigPyIterator_equal(self, *args)
    def copy(self): return _ADMM.SwigPyIterator_copy(self)
    def next(self): return _ADMM.SwigPyIterator_next(self)
    def __next__(self): return _ADMM.SwigPyIterator___next__(self)
    def previous(self): return _ADMM.SwigPyIterator_previous(self)
    def advance(self, *args): return _ADMM.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ADMM.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ADMM.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ADMM.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ADMM.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ADMM.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ADMM.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ADMM.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ADMM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADMM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADMM, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ADMM.new_ADMM()
        try: self.this.append(this)
        except: self.this = this
    def LoadNodeProximal(self, *args): return _ADMM.ADMM_LoadNodeProximal(self, *args)
    def LoadEdgeProximal(self, *args): return _ADMM.ADMM_LoadEdgeProximal(self, *args)
    def Solve(self, *args): return _ADMM.ADMM_Solve(self, *args)
    def PrintSolution(self): return _ADMM.ADMM_PrintSolution(self)
    __swig_destroy__ = _ADMM.delete_ADMM
    __del__ = lambda self : None;
ADMM_swigregister = _ADMM.ADMM_swigregister
ADMM_swigregister(ADMM)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.StringVector___nonzero__(self)
    def __bool__(self): return _ADMM.StringVector___bool__(self)
    def __len__(self): return _ADMM.StringVector___len__(self)
    def pop(self): return _ADMM.StringVector_pop(self)
    def __getslice__(self, *args): return _ADMM.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ADMM.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ADMM.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ADMM.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ADMM.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ADMM.StringVector___setitem__(self, *args)
    def append(self, *args): return _ADMM.StringVector_append(self, *args)
    def empty(self): return _ADMM.StringVector_empty(self)
    def size(self): return _ADMM.StringVector_size(self)
    def clear(self): return _ADMM.StringVector_clear(self)
    def swap(self, *args): return _ADMM.StringVector_swap(self, *args)
    def get_allocator(self): return _ADMM.StringVector_get_allocator(self)
    def begin(self): return _ADMM.StringVector_begin(self)
    def end(self): return _ADMM.StringVector_end(self)
    def rbegin(self): return _ADMM.StringVector_rbegin(self)
    def rend(self): return _ADMM.StringVector_rend(self)
    def pop_back(self): return _ADMM.StringVector_pop_back(self)
    def erase(self, *args): return _ADMM.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ADMM.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ADMM.StringVector_push_back(self, *args)
    def front(self): return _ADMM.StringVector_front(self)
    def back(self): return _ADMM.StringVector_back(self)
    def assign(self, *args): return _ADMM.StringVector_assign(self, *args)
    def resize(self, *args): return _ADMM.StringVector_resize(self, *args)
    def insert(self, *args): return _ADMM.StringVector_insert(self, *args)
    def reserve(self, *args): return _ADMM.StringVector_reserve(self, *args)
    def capacity(self): return _ADMM.StringVector_capacity(self)
    __swig_destroy__ = _ADMM.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _ADMM.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector2D, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.StringVector2D_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.StringVector2D___nonzero__(self)
    def __bool__(self): return _ADMM.StringVector2D___bool__(self)
    def __len__(self): return _ADMM.StringVector2D___len__(self)
    def pop(self): return _ADMM.StringVector2D_pop(self)
    def __getslice__(self, *args): return _ADMM.StringVector2D___getslice__(self, *args)
    def __setslice__(self, *args): return _ADMM.StringVector2D___setslice__(self, *args)
    def __delslice__(self, *args): return _ADMM.StringVector2D___delslice__(self, *args)
    def __delitem__(self, *args): return _ADMM.StringVector2D___delitem__(self, *args)
    def __getitem__(self, *args): return _ADMM.StringVector2D___getitem__(self, *args)
    def __setitem__(self, *args): return _ADMM.StringVector2D___setitem__(self, *args)
    def append(self, *args): return _ADMM.StringVector2D_append(self, *args)
    def empty(self): return _ADMM.StringVector2D_empty(self)
    def size(self): return _ADMM.StringVector2D_size(self)
    def clear(self): return _ADMM.StringVector2D_clear(self)
    def swap(self, *args): return _ADMM.StringVector2D_swap(self, *args)
    def get_allocator(self): return _ADMM.StringVector2D_get_allocator(self)
    def begin(self): return _ADMM.StringVector2D_begin(self)
    def end(self): return _ADMM.StringVector2D_end(self)
    def rbegin(self): return _ADMM.StringVector2D_rbegin(self)
    def rend(self): return _ADMM.StringVector2D_rend(self)
    def pop_back(self): return _ADMM.StringVector2D_pop_back(self)
    def erase(self, *args): return _ADMM.StringVector2D_erase(self, *args)
    def __init__(self, *args): 
        this = _ADMM.new_StringVector2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ADMM.StringVector2D_push_back(self, *args)
    def front(self): return _ADMM.StringVector2D_front(self)
    def back(self): return _ADMM.StringVector2D_back(self)
    def assign(self, *args): return _ADMM.StringVector2D_assign(self, *args)
    def resize(self, *args): return _ADMM.StringVector2D_resize(self, *args)
    def insert(self, *args): return _ADMM.StringVector2D_insert(self, *args)
    def reserve(self, *args): return _ADMM.StringVector2D_reserve(self, *args)
    def capacity(self): return _ADMM.StringVector2D_capacity(self)
    __swig_destroy__ = _ADMM.delete_StringVector2D
    __del__ = lambda self : None;
StringVector2D_swigregister = _ADMM.StringVector2D_swigregister
StringVector2D_swigregister(StringVector2D)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.IntVector___nonzero__(self)
    def __bool__(self): return _ADMM.IntVector___bool__(self)
    def __len__(self): return _ADMM.IntVector___len__(self)
    def pop(self): return _ADMM.IntVector_pop(self)
    def __getslice__(self, *args): return _ADMM.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ADMM.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ADMM.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ADMM.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ADMM.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ADMM.IntVector___setitem__(self, *args)
    def append(self, *args): return _ADMM.IntVector_append(self, *args)
    def empty(self): return _ADMM.IntVector_empty(self)
    def size(self): return _ADMM.IntVector_size(self)
    def clear(self): return _ADMM.IntVector_clear(self)
    def swap(self, *args): return _ADMM.IntVector_swap(self, *args)
    def get_allocator(self): return _ADMM.IntVector_get_allocator(self)
    def begin(self): return _ADMM.IntVector_begin(self)
    def end(self): return _ADMM.IntVector_end(self)
    def rbegin(self): return _ADMM.IntVector_rbegin(self)
    def rend(self): return _ADMM.IntVector_rend(self)
    def pop_back(self): return _ADMM.IntVector_pop_back(self)
    def erase(self, *args): return _ADMM.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ADMM.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ADMM.IntVector_push_back(self, *args)
    def front(self): return _ADMM.IntVector_front(self)
    def back(self): return _ADMM.IntVector_back(self)
    def assign(self, *args): return _ADMM.IntVector_assign(self, *args)
    def resize(self, *args): return _ADMM.IntVector_resize(self, *args)
    def insert(self, *args): return _ADMM.IntVector_insert(self, *args)
    def reserve(self, *args): return _ADMM.IntVector_reserve(self, *args)
    def capacity(self): return _ADMM.IntVector_capacity(self)
    __swig_destroy__ = _ADMM.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _ADMM.IntVector_swigregister
IntVector_swigregister(IntVector)

class IntVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector2D, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.IntVector2D_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.IntVector2D___nonzero__(self)
    def __bool__(self): return _ADMM.IntVector2D___bool__(self)
    def __len__(self): return _ADMM.IntVector2D___len__(self)
    def pop(self): return _ADMM.IntVector2D_pop(self)
    def __getslice__(self, *args): return _ADMM.IntVector2D___getslice__(self, *args)
    def __setslice__(self, *args): return _ADMM.IntVector2D___setslice__(self, *args)
    def __delslice__(self, *args): return _ADMM.IntVector2D___delslice__(self, *args)
    def __delitem__(self, *args): return _ADMM.IntVector2D___delitem__(self, *args)
    def __getitem__(self, *args): return _ADMM.IntVector2D___getitem__(self, *args)
    def __setitem__(self, *args): return _ADMM.IntVector2D___setitem__(self, *args)
    def append(self, *args): return _ADMM.IntVector2D_append(self, *args)
    def empty(self): return _ADMM.IntVector2D_empty(self)
    def size(self): return _ADMM.IntVector2D_size(self)
    def clear(self): return _ADMM.IntVector2D_clear(self)
    def swap(self, *args): return _ADMM.IntVector2D_swap(self, *args)
    def get_allocator(self): return _ADMM.IntVector2D_get_allocator(self)
    def begin(self): return _ADMM.IntVector2D_begin(self)
    def end(self): return _ADMM.IntVector2D_end(self)
    def rbegin(self): return _ADMM.IntVector2D_rbegin(self)
    def rend(self): return _ADMM.IntVector2D_rend(self)
    def pop_back(self): return _ADMM.IntVector2D_pop_back(self)
    def erase(self, *args): return _ADMM.IntVector2D_erase(self, *args)
    def __init__(self, *args): 
        this = _ADMM.new_IntVector2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ADMM.IntVector2D_push_back(self, *args)
    def front(self): return _ADMM.IntVector2D_front(self)
    def back(self): return _ADMM.IntVector2D_back(self)
    def assign(self, *args): return _ADMM.IntVector2D_assign(self, *args)
    def resize(self, *args): return _ADMM.IntVector2D_resize(self, *args)
    def insert(self, *args): return _ADMM.IntVector2D_insert(self, *args)
    def reserve(self, *args): return _ADMM.IntVector2D_reserve(self, *args)
    def capacity(self): return _ADMM.IntVector2D_capacity(self)
    __swig_destroy__ = _ADMM.delete_IntVector2D
    __del__ = lambda self : None;
IntVector2D_swigregister = _ADMM.IntVector2D_swigregister
IntVector2D_swigregister(IntVector2D)

class IntVector3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector3D, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.IntVector3D_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.IntVector3D___nonzero__(self)
    def __bool__(self): return _ADMM.IntVector3D___bool__(self)
    def __len__(self): return _ADMM.IntVector3D___len__(self)
    def pop(self): return _ADMM.IntVector3D_pop(self)
    def __getslice__(self, *args): return _ADMM.IntVector3D___getslice__(self, *args)
    def __setslice__(self, *args): return _ADMM.IntVector3D___setslice__(self, *args)
    def __delslice__(self, *args): return _ADMM.IntVector3D___delslice__(self, *args)
    def __delitem__(self, *args): return _ADMM.IntVector3D___delitem__(self, *args)
    def __getitem__(self, *args): return _ADMM.IntVector3D___getitem__(self, *args)
    def __setitem__(self, *args): return _ADMM.IntVector3D___setitem__(self, *args)
    def append(self, *args): return _ADMM.IntVector3D_append(self, *args)
    def empty(self): return _ADMM.IntVector3D_empty(self)
    def size(self): return _ADMM.IntVector3D_size(self)
    def clear(self): return _ADMM.IntVector3D_clear(self)
    def swap(self, *args): return _ADMM.IntVector3D_swap(self, *args)
    def get_allocator(self): return _ADMM.IntVector3D_get_allocator(self)
    def begin(self): return _ADMM.IntVector3D_begin(self)
    def end(self): return _ADMM.IntVector3D_end(self)
    def rbegin(self): return _ADMM.IntVector3D_rbegin(self)
    def rend(self): return _ADMM.IntVector3D_rend(self)
    def pop_back(self): return _ADMM.IntVector3D_pop_back(self)
    def erase(self, *args): return _ADMM.IntVector3D_erase(self, *args)
    def __init__(self, *args): 
        this = _ADMM.new_IntVector3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ADMM.IntVector3D_push_back(self, *args)
    def front(self): return _ADMM.IntVector3D_front(self)
    def back(self): return _ADMM.IntVector3D_back(self)
    def assign(self, *args): return _ADMM.IntVector3D_assign(self, *args)
    def resize(self, *args): return _ADMM.IntVector3D_resize(self, *args)
    def insert(self, *args): return _ADMM.IntVector3D_insert(self, *args)
    def reserve(self, *args): return _ADMM.IntVector3D_reserve(self, *args)
    def capacity(self): return _ADMM.IntVector3D_capacity(self)
    __swig_destroy__ = _ADMM.delete_IntVector3D
    __del__ = lambda self : None;
IntVector3D_swigregister = _ADMM.IntVector3D_swigregister
IntVector3D_swigregister(IntVector3D)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.DoubleVector___nonzero__(self)
    def __bool__(self): return _ADMM.DoubleVector___bool__(self)
    def __len__(self): return _ADMM.DoubleVector___len__(self)
    def pop(self): return _ADMM.DoubleVector_pop(self)
    def __getslice__(self, *args): return _ADMM.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ADMM.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ADMM.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ADMM.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ADMM.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ADMM.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _ADMM.DoubleVector_append(self, *args)
    def empty(self): return _ADMM.DoubleVector_empty(self)
    def size(self): return _ADMM.DoubleVector_size(self)
    def clear(self): return _ADMM.DoubleVector_clear(self)
    def swap(self, *args): return _ADMM.DoubleVector_swap(self, *args)
    def get_allocator(self): return _ADMM.DoubleVector_get_allocator(self)
    def begin(self): return _ADMM.DoubleVector_begin(self)
    def end(self): return _ADMM.DoubleVector_end(self)
    def rbegin(self): return _ADMM.DoubleVector_rbegin(self)
    def rend(self): return _ADMM.DoubleVector_rend(self)
    def pop_back(self): return _ADMM.DoubleVector_pop_back(self)
    def erase(self, *args): return _ADMM.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ADMM.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ADMM.DoubleVector_push_back(self, *args)
    def front(self): return _ADMM.DoubleVector_front(self)
    def back(self): return _ADMM.DoubleVector_back(self)
    def assign(self, *args): return _ADMM.DoubleVector_assign(self, *args)
    def resize(self, *args): return _ADMM.DoubleVector_resize(self, *args)
    def insert(self, *args): return _ADMM.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _ADMM.DoubleVector_reserve(self, *args)
    def capacity(self): return _ADMM.DoubleVector_capacity(self)
    __swig_destroy__ = _ADMM.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _ADMM.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2D, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.DoubleVector2D_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.DoubleVector2D___nonzero__(self)
    def __bool__(self): return _ADMM.DoubleVector2D___bool__(self)
    def __len__(self): return _ADMM.DoubleVector2D___len__(self)
    def pop(self): return _ADMM.DoubleVector2D_pop(self)
    def __getslice__(self, *args): return _ADMM.DoubleVector2D___getslice__(self, *args)
    def __setslice__(self, *args): return _ADMM.DoubleVector2D___setslice__(self, *args)
    def __delslice__(self, *args): return _ADMM.DoubleVector2D___delslice__(self, *args)
    def __delitem__(self, *args): return _ADMM.DoubleVector2D___delitem__(self, *args)
    def __getitem__(self, *args): return _ADMM.DoubleVector2D___getitem__(self, *args)
    def __setitem__(self, *args): return _ADMM.DoubleVector2D___setitem__(self, *args)
    def append(self, *args): return _ADMM.DoubleVector2D_append(self, *args)
    def empty(self): return _ADMM.DoubleVector2D_empty(self)
    def size(self): return _ADMM.DoubleVector2D_size(self)
    def clear(self): return _ADMM.DoubleVector2D_clear(self)
    def swap(self, *args): return _ADMM.DoubleVector2D_swap(self, *args)
    def get_allocator(self): return _ADMM.DoubleVector2D_get_allocator(self)
    def begin(self): return _ADMM.DoubleVector2D_begin(self)
    def end(self): return _ADMM.DoubleVector2D_end(self)
    def rbegin(self): return _ADMM.DoubleVector2D_rbegin(self)
    def rend(self): return _ADMM.DoubleVector2D_rend(self)
    def pop_back(self): return _ADMM.DoubleVector2D_pop_back(self)
    def erase(self, *args): return _ADMM.DoubleVector2D_erase(self, *args)
    def __init__(self, *args): 
        this = _ADMM.new_DoubleVector2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ADMM.DoubleVector2D_push_back(self, *args)
    def front(self): return _ADMM.DoubleVector2D_front(self)
    def back(self): return _ADMM.DoubleVector2D_back(self)
    def assign(self, *args): return _ADMM.DoubleVector2D_assign(self, *args)
    def resize(self, *args): return _ADMM.DoubleVector2D_resize(self, *args)
    def insert(self, *args): return _ADMM.DoubleVector2D_insert(self, *args)
    def reserve(self, *args): return _ADMM.DoubleVector2D_reserve(self, *args)
    def capacity(self): return _ADMM.DoubleVector2D_capacity(self)
    __swig_destroy__ = _ADMM.delete_DoubleVector2D
    __del__ = lambda self : None;
DoubleVector2D_swigregister = _ADMM.DoubleVector2D_swigregister
DoubleVector2D_swigregister(DoubleVector2D)

class DoubleVector3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector3D, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.DoubleVector3D_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.DoubleVector3D___nonzero__(self)
    def __bool__(self): return _ADMM.DoubleVector3D___bool__(self)
    def __len__(self): return _ADMM.DoubleVector3D___len__(self)
    def pop(self): return _ADMM.DoubleVector3D_pop(self)
    def __getslice__(self, *args): return _ADMM.DoubleVector3D___getslice__(self, *args)
    def __setslice__(self, *args): return _ADMM.DoubleVector3D___setslice__(self, *args)
    def __delslice__(self, *args): return _ADMM.DoubleVector3D___delslice__(self, *args)
    def __delitem__(self, *args): return _ADMM.DoubleVector3D___delitem__(self, *args)
    def __getitem__(self, *args): return _ADMM.DoubleVector3D___getitem__(self, *args)
    def __setitem__(self, *args): return _ADMM.DoubleVector3D___setitem__(self, *args)
    def append(self, *args): return _ADMM.DoubleVector3D_append(self, *args)
    def empty(self): return _ADMM.DoubleVector3D_empty(self)
    def size(self): return _ADMM.DoubleVector3D_size(self)
    def clear(self): return _ADMM.DoubleVector3D_clear(self)
    def swap(self, *args): return _ADMM.DoubleVector3D_swap(self, *args)
    def get_allocator(self): return _ADMM.DoubleVector3D_get_allocator(self)
    def begin(self): return _ADMM.DoubleVector3D_begin(self)
    def end(self): return _ADMM.DoubleVector3D_end(self)
    def rbegin(self): return _ADMM.DoubleVector3D_rbegin(self)
    def rend(self): return _ADMM.DoubleVector3D_rend(self)
    def pop_back(self): return _ADMM.DoubleVector3D_pop_back(self)
    def erase(self, *args): return _ADMM.DoubleVector3D_erase(self, *args)
    def __init__(self, *args): 
        this = _ADMM.new_DoubleVector3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ADMM.DoubleVector3D_push_back(self, *args)
    def front(self): return _ADMM.DoubleVector3D_front(self)
    def back(self): return _ADMM.DoubleVector3D_back(self)
    def assign(self, *args): return _ADMM.DoubleVector3D_assign(self, *args)
    def resize(self, *args): return _ADMM.DoubleVector3D_resize(self, *args)
    def insert(self, *args): return _ADMM.DoubleVector3D_insert(self, *args)
    def reserve(self, *args): return _ADMM.DoubleVector3D_reserve(self, *args)
    def capacity(self): return _ADMM.DoubleVector3D_capacity(self)
    __swig_destroy__ = _ADMM.delete_DoubleVector3D
    __del__ = lambda self : None;
DoubleVector3D_swigregister = _ADMM.DoubleVector3D_swigregister
DoubleVector3D_swigregister(DoubleVector3D)

class LinOpVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinOpVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinOpVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.LinOpVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.LinOpVector___nonzero__(self)
    def __bool__(self): return _ADMM.LinOpVector___bool__(self)
    def __len__(self): return _ADMM.LinOpVector___len__(self)
    def pop(self): return _ADMM.LinOpVector_pop(self)
    def __getslice__(self, *args): return _ADMM.LinOpVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ADMM.LinOpVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ADMM.LinOpVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ADMM.LinOpVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ADMM.LinOpVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ADMM.LinOpVector___setitem__(self, *args)
    def append(self, *args): return _ADMM.LinOpVector_append(self, *args)
    def empty(self): return _ADMM.LinOpVector_empty(self)
    def size(self): return _ADMM.LinOpVector_size(self)
    def clear(self): return _ADMM.LinOpVector_clear(self)
    def swap(self, *args): return _ADMM.LinOpVector_swap(self, *args)
    def get_allocator(self): return _ADMM.LinOpVector_get_allocator(self)
    def begin(self): return _ADMM.LinOpVector_begin(self)
    def end(self): return _ADMM.LinOpVector_end(self)
    def rbegin(self): return _ADMM.LinOpVector_rbegin(self)
    def rend(self): return _ADMM.LinOpVector_rend(self)
    def pop_back(self): return _ADMM.LinOpVector_pop_back(self)
    def erase(self, *args): return _ADMM.LinOpVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ADMM.new_LinOpVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ADMM.LinOpVector_push_back(self, *args)
    def front(self): return _ADMM.LinOpVector_front(self)
    def back(self): return _ADMM.LinOpVector_back(self)
    def assign(self, *args): return _ADMM.LinOpVector_assign(self, *args)
    def resize(self, *args): return _ADMM.LinOpVector_resize(self, *args)
    def insert(self, *args): return _ADMM.LinOpVector_insert(self, *args)
    def reserve(self, *args): return _ADMM.LinOpVector_reserve(self, *args)
    def capacity(self): return _ADMM.LinOpVector_capacity(self)
    __swig_destroy__ = _ADMM.delete_LinOpVector
    __del__ = lambda self : None;
LinOpVector_swigregister = _ADMM.LinOpVector_swigregister
LinOpVector_swigregister(LinOpVector)

class LinOpVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinOpVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinOpVector2D, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.LinOpVector2D_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.LinOpVector2D___nonzero__(self)
    def __bool__(self): return _ADMM.LinOpVector2D___bool__(self)
    def __len__(self): return _ADMM.LinOpVector2D___len__(self)
    def pop(self): return _ADMM.LinOpVector2D_pop(self)
    def __getslice__(self, *args): return _ADMM.LinOpVector2D___getslice__(self, *args)
    def __setslice__(self, *args): return _ADMM.LinOpVector2D___setslice__(self, *args)
    def __delslice__(self, *args): return _ADMM.LinOpVector2D___delslice__(self, *args)
    def __delitem__(self, *args): return _ADMM.LinOpVector2D___delitem__(self, *args)
    def __getitem__(self, *args): return _ADMM.LinOpVector2D___getitem__(self, *args)
    def __setitem__(self, *args): return _ADMM.LinOpVector2D___setitem__(self, *args)
    def append(self, *args): return _ADMM.LinOpVector2D_append(self, *args)
    def empty(self): return _ADMM.LinOpVector2D_empty(self)
    def size(self): return _ADMM.LinOpVector2D_size(self)
    def clear(self): return _ADMM.LinOpVector2D_clear(self)
    def swap(self, *args): return _ADMM.LinOpVector2D_swap(self, *args)
    def get_allocator(self): return _ADMM.LinOpVector2D_get_allocator(self)
    def begin(self): return _ADMM.LinOpVector2D_begin(self)
    def end(self): return _ADMM.LinOpVector2D_end(self)
    def rbegin(self): return _ADMM.LinOpVector2D_rbegin(self)
    def rend(self): return _ADMM.LinOpVector2D_rend(self)
    def pop_back(self): return _ADMM.LinOpVector2D_pop_back(self)
    def erase(self, *args): return _ADMM.LinOpVector2D_erase(self, *args)
    def __init__(self, *args): 
        this = _ADMM.new_LinOpVector2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ADMM.LinOpVector2D_push_back(self, *args)
    def front(self): return _ADMM.LinOpVector2D_front(self)
    def back(self): return _ADMM.LinOpVector2D_back(self)
    def assign(self, *args): return _ADMM.LinOpVector2D_assign(self, *args)
    def resize(self, *args): return _ADMM.LinOpVector2D_resize(self, *args)
    def insert(self, *args): return _ADMM.LinOpVector2D_insert(self, *args)
    def reserve(self, *args): return _ADMM.LinOpVector2D_reserve(self, *args)
    def capacity(self): return _ADMM.LinOpVector2D_capacity(self)
    __swig_destroy__ = _ADMM.delete_LinOpVector2D
    __del__ = lambda self : None;
LinOpVector2D_swigregister = _ADMM.LinOpVector2D_swigregister
LinOpVector2D_swigregister(LinOpVector2D)

class ArgMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArgMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.ArgMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.ArgMap___nonzero__(self)
    def __bool__(self): return _ADMM.ArgMap___bool__(self)
    def __len__(self): return _ADMM.ArgMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _ADMM.ArgMap___getitem__(self, *args)
    def __delitem__(self, *args): return _ADMM.ArgMap___delitem__(self, *args)
    def has_key(self, *args): return _ADMM.ArgMap_has_key(self, *args)
    def keys(self): return _ADMM.ArgMap_keys(self)
    def values(self): return _ADMM.ArgMap_values(self)
    def items(self): return _ADMM.ArgMap_items(self)
    def __contains__(self, *args): return _ADMM.ArgMap___contains__(self, *args)
    def key_iterator(self): return _ADMM.ArgMap_key_iterator(self)
    def value_iterator(self): return _ADMM.ArgMap_value_iterator(self)
    def __setitem__(self, *args): return _ADMM.ArgMap___setitem__(self, *args)
    def asdict(self): return _ADMM.ArgMap_asdict(self)
    def __init__(self, *args): 
        this = _ADMM.new_ArgMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _ADMM.ArgMap_empty(self)
    def size(self): return _ADMM.ArgMap_size(self)
    def clear(self): return _ADMM.ArgMap_clear(self)
    def swap(self, *args): return _ADMM.ArgMap_swap(self, *args)
    def get_allocator(self): return _ADMM.ArgMap_get_allocator(self)
    def begin(self): return _ADMM.ArgMap_begin(self)
    def end(self): return _ADMM.ArgMap_end(self)
    def rbegin(self): return _ADMM.ArgMap_rbegin(self)
    def rend(self): return _ADMM.ArgMap_rend(self)
    def count(self, *args): return _ADMM.ArgMap_count(self, *args)
    def erase(self, *args): return _ADMM.ArgMap_erase(self, *args)
    def find(self, *args): return _ADMM.ArgMap_find(self, *args)
    def lower_bound(self, *args): return _ADMM.ArgMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _ADMM.ArgMap_upper_bound(self, *args)
    __swig_destroy__ = _ADMM.delete_ArgMap
    __del__ = lambda self : None;
ArgMap_swigregister = _ADMM.ArgMap_swigregister
ArgMap_swigregister(ArgMap)

class ArgdMapVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgdMapVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArgdMapVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ADMM.ArgdMapVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ADMM.ArgdMapVector___nonzero__(self)
    def __bool__(self): return _ADMM.ArgdMapVector___bool__(self)
    def __len__(self): return _ADMM.ArgdMapVector___len__(self)
    def pop(self): return _ADMM.ArgdMapVector_pop(self)
    def __getslice__(self, *args): return _ADMM.ArgdMapVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ADMM.ArgdMapVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ADMM.ArgdMapVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ADMM.ArgdMapVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ADMM.ArgdMapVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ADMM.ArgdMapVector___setitem__(self, *args)
    def append(self, *args): return _ADMM.ArgdMapVector_append(self, *args)
    def empty(self): return _ADMM.ArgdMapVector_empty(self)
    def size(self): return _ADMM.ArgdMapVector_size(self)
    def clear(self): return _ADMM.ArgdMapVector_clear(self)
    def swap(self, *args): return _ADMM.ArgdMapVector_swap(self, *args)
    def get_allocator(self): return _ADMM.ArgdMapVector_get_allocator(self)
    def begin(self): return _ADMM.ArgdMapVector_begin(self)
    def end(self): return _ADMM.ArgdMapVector_end(self)
    def rbegin(self): return _ADMM.ArgdMapVector_rbegin(self)
    def rend(self): return _ADMM.ArgdMapVector_rend(self)
    def pop_back(self): return _ADMM.ArgdMapVector_pop_back(self)
    def erase(self, *args): return _ADMM.ArgdMapVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ADMM.new_ArgdMapVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ADMM.ArgdMapVector_push_back(self, *args)
    def front(self): return _ADMM.ArgdMapVector_front(self)
    def back(self): return _ADMM.ArgdMapVector_back(self)
    def assign(self, *args): return _ADMM.ArgdMapVector_assign(self, *args)
    def resize(self, *args): return _ADMM.ArgdMapVector_resize(self, *args)
    def insert(self, *args): return _ADMM.ArgdMapVector_insert(self, *args)
    def reserve(self, *args): return _ADMM.ArgdMapVector_reserve(self, *args)
    def capacity(self): return _ADMM.ArgdMapVector_capacity(self)
    __swig_destroy__ = _ADMM.delete_ArgdMapVector
    __del__ = lambda self : None;
ArgdMapVector_swigregister = _ADMM.ArgdMapVector_swigregister
ArgdMapVector_swigregister(ArgdMapVector)


def numpyToVector(*args):
  return _ADMM.numpyToVector(*args)
numpyToVector = _ADMM.numpyToVector

def numpyToMatrix(*args):
  return _ADMM.numpyToMatrix(*args)
numpyToMatrix = _ADMM.numpyToMatrix
# This file is compatible with both classic and new-style classes.


